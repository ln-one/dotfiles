# PowerShell Custom Functions
# Windows-specific utility functions and 1Password helpers

{{- if .features.enable_1password }}
# 1Password helper functions
function Get-1PasswordItem {
    param(
        [Parameter(Mandatory=$true)]
        [string]$Reference
    )
    
    if (Get-Command op -ErrorAction SilentlyContinue) {
        try {
            return op read $Reference
        } catch {
            Write-Warning "Failed to read 1Password item: $Reference"
            return $null
        }
    } else {
        Write-Warning "1Password CLI not available"
        return $null
    }
}

function Connect-1Password {
    if (Get-Command op -ErrorAction SilentlyContinue) {
        try {
            op signin
            Write-Host "Successfully signed in to 1Password" -ForegroundColor Green
        } catch {
            Write-Error "Failed to sign in to 1Password: $_"
        }
    } else {
        Write-Warning "1Password CLI not available"
    }
}

function Get-1PasswordStatus {
    if (Get-Command op -ErrorAction SilentlyContinue) {
        try {
            $account = op account list --format=json | ConvertFrom-Json
            if ($account) {
                Write-Host "1Password CLI is configured and authenticated" -ForegroundColor Green
                $account | Format-Table -Property user_name, domain, state
            } else {
                Write-Host "1Password CLI is installed but not authenticated" -ForegroundColor Yellow
            }
        } catch {
            Write-Host "1Password CLI is installed but not authenticated" -ForegroundColor Yellow
        }
    } else {
        Write-Host "1Password CLI is not installed" -ForegroundColor Red
    }
}
{{- end }}

# Enhanced directory listing with eza (if available)
function ll {
    if (Get-Command eza -ErrorAction SilentlyContinue) {
        eza -la --icons --git
    } else {
        Get-ChildItem -Force
    }
}

function la {
    if (Get-Command eza -ErrorAction SilentlyContinue) {
        eza -la --icons
    } else {
        Get-ChildItem -Force
    }
}

function lt {
    if (Get-Command eza -ErrorAction SilentlyContinue) {
        eza --tree --icons
    } else {
        tree /f
    }
}

# Enhanced cat with bat (if available)
function cat {
    param([string]$Path)
    
    if (Get-Command bat -ErrorAction SilentlyContinue) {
        bat $Path
    } else {
        Get-Content $Path
    }
}

# Quick edit function
function edit {
    param([string]$Path)
    
    if ($Path) {
        & $env:EDITOR $Path
    } else {
        Write-Host "Usage: edit <file>" -ForegroundColor Yellow
    }
}

# Quick directory navigation
function .. { Set-Location .. }
function ... { Set-Location ../.. }
function .... { Set-Location ../../.. }

# Git shortcuts
function gs { git status }
function ga { git add $args }
function gc { git commit $args }
function gp { git push $args }
function gl { git log --oneline -10 }

# System information
function sysinfo {
    Write-Host "System Information:" -ForegroundColor Cyan
    Write-Host "OS: $((Get-CimInstance Win32_OperatingSystem).Caption)"
    Write-Host "Version: $((Get-CimInstance Win32_OperatingSystem).Version)"
    Write-Host "Architecture: $env:PROCESSOR_ARCHITECTURE"
    Write-Host "PowerShell: $($PSVersionTable.PSVersion)"
    Write-Host "User: $env:USERNAME"
    Write-Host "Computer: $env:COMPUTERNAME"
}

# Network utilities
function myip {
    try {
        $ip = Invoke-RestMethod -Uri "https://api.ipify.org" -TimeoutSec 5
        Write-Host "Public IP: $ip" -ForegroundColor Green
    } catch {
        Write-Warning "Failed to get public IP"
    }
    
    $localIPs = Get-NetIPAddress -AddressFamily IPv4 | Where-Object { $_.IPAddress -ne "127.0.0.1" }
    Write-Host "Local IPs:" -ForegroundColor Cyan
    $localIPs | ForEach-Object { Write-Host "  $($_.IPAddress)" }
}

# Reload PowerShell profile
function Reload-Profile {
    if (Test-Path $PROFILE) {
        . $PROFILE
        Write-Host "PowerShell profile reloaded" -ForegroundColor Green
    } else {
        Write-Warning "PowerShell profile not found"
    }
}