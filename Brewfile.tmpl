# Brewfile - Homebrew 包管理配置
# 通过 Chezmoi 模板管理跨平台工具安装
# Requirements: 4.1, 4.2, 8.1

# 核心开发工具
brew "git"              # 版本控制
brew "curl"             # HTTP 客户端
brew "wget"             # 文件下载工具
brew "unzip"            # 压缩文件处理
brew "tree"             # 目录树显示

# 现代化 CLI 工具 (替代传统工具)
brew "eza"              # 现代化的 ls 替代品 (exa 的活跃分支)
brew "bat"              # 现代化的 cat 替代品 (统一使用 bat，不再使用 batcat)
brew "fd"               # 现代化的 find 替代品 (统一使用 fd，不再使用 fd-find)
brew "ripgrep"          # 现代化的 grep 替代品
brew "fzf"              # 模糊搜索工具
brew "zoxide"           # 智能目录跳转工具
brew "jq"               # JSON 处理工具
brew "atool"            # 统一压缩文件处理工具 (替代自定义extract函数)

# 1Password CLI (仅 macOS 通过 Homebrew)
{{- if and (hasKey . "features") .features.enable_1password (eq .chezmoi.os "darwin") }}
tap "1password/tap"
cask "1password/tap/1password-cli"  # macOS 通过 Homebrew tap 安装
{{- end }}

# 注意: Linux 上的 1Password CLI 必须通过 apt 仓库安装
# 这是一个例外情况，不能通过 Homebrew 统一管理

# Shell 和终端工具
brew "zsh"              # 现代 Shell (macOS 默认)
brew "bash"             # 现代 Bash (macOS 自带版本较老)
brew "tmux"             # 终端复用器
brew "starship"         # 跨 Shell 提示符

# 版本管理和性能优化工具
{{- if and (hasKey . "features") .features.enable_node }}
brew "fnm"              # 快速 Node.js 版本管理器
{{- end }}
brew "forgit"           # Git的fzf增强工具 (替代自定义git函数)

# 编辑器和开发工具
brew "neovim"           # 现代化的 Vim
brew "htop"             # 系统监控工具

{{- if eq .chezmoi.os "darwin" }}
# macOS 特定工具
brew "mas"              # Mac App Store CLI
brew "mackup"           # macOS 应用配置备份

# macOS 应用程序 (通过 Homebrew Cask)
cask "visual-studio-code"
cask "iterm2"
cask "docker"
cask "1password"
cask "1password-cli"

# Nerd Fonts (通过 Homebrew Cask)
{{- if and (hasKey . "features") .features.enable_nerd_fonts }}
cask "font-fira-code-nerd-font"
cask "font-hack-nerd-font"
cask "font-jetbrains-mono-nerd-font"
cask "font-meslo-lg-nerd-font"
{{- end }}

{{- else if eq .chezmoi.os "linux" }}
# Linux 特定工具
# 注意: gcc 和 make 应通过系统包管理器安装 (apt install build-essential)

{{- end }}

{{- if and (hasKey . "features") .features.enable_ai_tools }}
# AI 开发工具 (可选)
brew "gh"               # GitHub CLI
brew "glab"             # GitLab CLI
{{- end }}

{{- if and (hasKey . "features") .features.enable_proxy }}
# 代理和网络工具 (可选)
brew "proxychains-ng"   # 代理链工具
{{- end }}

{{- if eq .environment "desktop" }}
# 桌面环境工具
{{- if eq .chezmoi.os "darwin" }}
cask "firefox"
cask "google-chrome"
cask "slack"
cask "zoom"
{{- end }}
{{- else if eq .environment "server" }}
# 服务器环境工具
brew "fail2ban"         # 安全工具 (如果可用)
{{- end }}

# 开发语言和运行时管理
{{- if and (hasKey . "features") .features.enable_node }}
brew "node"             # Node.js
brew "npm"              # Node 包管理器
{{- end }}

{{- if and (hasKey . "features") .features.enable_python }}
brew "python@3.11"      # Python 3.11
brew "pipx"             # Python 应用安装器
{{- end }}

{{- if and (hasKey . "features") .features.enable_go }}
brew "go"               # Go 语言
{{- end }}

{{- if and (hasKey . "features") .features.enable_rust }}
brew "rust"             # Rust 语言
{{- end }}

# 容器和虚拟化工具
{{- if and (hasKey . "features") .features.enable_docker }}
{{- if eq .chezmoi.os "linux" }}
brew "docker"           # Docker (Linux)
brew "docker-compose"   # Docker Compose
{{- end }}
{{- end }}

# 注意: 以下工具需要特殊安装方式，不通过 Homebrew:
# - evalcache: 通过 git clone 安装到 ~/.evalcache
# - zim: 通过 curl 安装脚本安装
# 这些工具的安装逻辑保留在相应的配置模板中