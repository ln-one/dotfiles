#!/bin/bash
# 版本管理器自动安装和配置脚本
# 安装和配置 NVM, pyenv, rbenv 等版本管理器
# Requirements: 8.3

set -euo pipefail

# 颜色定义
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m'

# 日志函数
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_step() {
    echo -e "${BLUE}[STEP]${NC} $1"
}

log_success() {
    echo -e "${PURPLE}[SUCCESS]${NC} $1"
}

# 全局变量
PLATFORM="{{ .chezmoi.os }}"
ARCH="{{ .chezmoi.arch }}"
HOME_DIR="{{ .chezmoi.homeDir }}"

# 版本管理器配置
declare -A VERSION_MANAGERS=(
    ["nvm"]="Node.js 版本管理器"
    ["pyenv"]="Python 版本管理器"
    ["rbenv"]="Ruby 版本管理器"
    ["mise"]="通用版本管理器"
)

# 检查版本管理器是否已安装
check_version_manager_installed() {
    local manager="$1"
    
    case "$manager" in
        "nvm")
            [[ -s "$HOME_DIR/.nvm/nvm.sh" ]] && return 0
            ;;
        "pyenv")
            command -v pyenv >/dev/null 2>&1 && return 0
            ;;
        "rbenv")
            command -v rbenv >/dev/null 2>&1 && return 0
            ;;
        "mise")
            command -v mise >/dev/null 2>&1 && return 0
            ;;
        *)
            return 1
            ;;
    esac
    
    return 1
}

# 安装 NVM (Node Version Manager)
install_nvm() {
    log_step "安装 NVM (Node Version Manager)..."
    
    if check_version_manager_installed "nvm"; then
        log_success "✅ NVM 已安装"
        return 0
    fi
    
    # 下载并安装 NVM
    local nvm_version="v0.39.7"  # 使用稳定版本
    local install_script="https://raw.githubusercontent.com/nvm-sh/nvm/${nvm_version}/install.sh"
    
    log_info "下载 NVM 安装脚本..."
    if curl --connect-timeout 30 --max-time 300 --retry 3 --retry-delay 5 -o- "$install_script" | bash; then
        log_success "✅ NVM 安装成功"
        
        # 重新加载 shell 环境
        export NVM_DIR="$HOME_DIR/.nvm"
        [[ -s "$NVM_DIR/nvm.sh" ]] && source "$NVM_DIR/nvm.sh"
        
        # 跳过自动安装 Node.js，让用户手动安装
        log_info "NVM 已安装，可以使用 'nvm install --lts' 安装 Node.js LTS 版本"
        
        return 0
    else
        log_error "❌ NVM 安装失败"
        return 1
    fi
}

# 安装 pyenv (Python Version Manager)
install_pyenv() {
    log_step "安装 pyenv (Python Version Manager)..."
    
    if check_version_manager_installed "pyenv"; then
        log_success "✅ pyenv 已安装"
        return 0
    fi
    
    # 安装 pyenv 依赖
    log_info "安装 pyenv 构建依赖..."
    case "$PLATFORM" in
        "linux")
            if command -v apt-get >/dev/null 2>&1; then
                sudo apt-get update
                sudo apt-get install -y make build-essential libssl-dev zlib1g-dev \
                    libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm \
                    libncursesw5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev \
                    libffi-dev liblzma-dev
            elif command -v yum >/dev/null 2>&1; then
                sudo yum groupinstall -y "Development Tools"
                sudo yum install -y gcc openssl-devel bzip2-devel libffi-devel \
                    zlib-devel readline-devel sqlite-devel
            fi
            ;;
        "darwin")
            # macOS 通常已有必要的构建工具
            log_info "macOS 环境，跳过依赖安装"
            ;;
    esac
    
    # 使用 git 直接安装 pyenv (更可靠的方法)
    log_info "使用 git 克隆 pyenv..."
    if git clone https://github.com/pyenv/pyenv.git "$HOME_DIR/.pyenv"; then
        log_success "✅ pyenv 克隆成功"
        
        # 克隆 pyenv-virtualenv 插件
        git clone https://github.com/pyenv/pyenv-virtualenv.git "$HOME_DIR/.pyenv/plugins/pyenv-virtualenv" || true
        
        # 设置环境变量
        export PYENV_ROOT="$HOME_DIR/.pyenv"
        export PATH="$PYENV_ROOT/bin:$PATH"
        
        # 编译 pyenv (可选，提高性能)
        cd "$HOME_DIR/.pyenv" && src/configure && make -C src || log_warn "pyenv 编译失败，将使用解释模式"
        
        # 初始化 pyenv
        if command -v pyenv >/dev/null 2>&1; then
            eval "$(pyenv init -)"
            log_success "✅ pyenv 安装成功"
            
            # 跳过自动安装 Python，让用户手动安装
            log_info "pyenv 已安装，可以使用 'pyenv install <version>' 安装 Python 版本"
        fi
        
        return 0
    else
        log_error "❌ pyenv 安装失败"
        return 1
    fi
}

# 安装 rbenv (Ruby Version Manager)
install_rbenv() {
    log_step "安装 rbenv (Ruby Version Manager)..."
    
    if check_version_manager_installed "rbenv"; then
        log_success "✅ rbenv 已安装"
        return 0
    fi
    
    # 使用 Homebrew 或 git 安装 rbenv
    if command -v brew >/dev/null 2>&1; then
        log_info "使用 Homebrew 安装 rbenv..."
        brew install rbenv ruby-build
    else
        log_info "使用 git 安装 rbenv..."
        git clone https://github.com/rbenv/rbenv.git "$HOME_DIR/.rbenv"
        git clone https://github.com/rbenv/ruby-build.git "$HOME_DIR/.rbenv/plugins/ruby-build"
        
        # 编译动态扩展
        cd "$HOME_DIR/.rbenv" && src/configure && make -C src
    fi
    
    # 设置环境变量
    export PATH="$HOME_DIR/.rbenv/bin:$PATH"
    
    if command -v rbenv >/dev/null 2>&1; then
        eval "$(rbenv init -)"
        log_success "✅ rbenv 安装成功"
        
        # 安装最新的 Ruby 稳定版
        log_info "安装 Ruby 最新稳定版..."
        local ruby_version=$(rbenv install -l | grep -E '^\s*3\.[0-9]+\.[0-9]+$' | tail -1 | tr -d ' ')
        if [[ -n "$ruby_version" ]]; then
            rbenv install "$ruby_version"
            rbenv global "$ruby_version"
            log_success "✅ Ruby $ruby_version 安装完成"
        fi
        
        return 0
    else
        log_error "❌ rbenv 安装失败"
        return 1
    fi
}

# 安装 mise (通用版本管理器)
install_mise() {
    log_step "安装 mise (通用版本管理器)..."
    
    if check_version_manager_installed "mise"; then
        log_success "✅ mise 已安装"
        return 0
    fi
    
    # 使用官方安装脚本
    log_info "下载 mise 安装脚本..."
    if curl --connect-timeout 30 --max-time 300 --retry 3 --retry-delay 5 https://mise.run | sh; then
        log_success "✅ mise 安装成功"
        
        # 设置环境变量
        export PATH="$HOME_DIR/.local/bin:$PATH"
        
        if command -v mise >/dev/null 2>&1; then
            # 激活 mise
            eval "$(mise activate bash)"
            log_info "mise 已激活"
        fi
        
        return 0
    else
        log_error "❌ mise 安装失败"
        return 1
    fi
}

# 创建版本管理器配置文件
create_version_manager_configs() {
    log_step "创建版本管理器配置文件..."
    
    # 创建 .nvmrc 文件
    if check_version_manager_installed "nvm"; then
        echo "lts/*" > "$HOME_DIR/.nvmrc"
        log_info "已创建 .nvmrc 配置文件"
    fi

    # 创建 .python-version 文件
    if check_version_manager_installed "pyenv"; then
        local python_version=$(pyenv global 2>/dev/null || echo "3.12.0")
        echo "$python_version" > "$HOME_DIR/.python-version"
        log_info "已创建 .python-version 配置文件"
    fi

    # 创建 .ruby-version 文件 (如果安装了 rbenv)
    if check_version_manager_installed "rbenv"; then
        local ruby_version=$(rbenv global 2>/dev/null || echo "3.3.0")
        echo "$ruby_version" > "$HOME_DIR/.ruby-version"
        log_info "已创建 .ruby-version 配置文件"
    fi

    # 创建 .mise.toml 配置文件 (如果安装了 mise)
    if check_version_manager_installed "mise"; then
        cat > "$HOME_DIR/.mise.toml" << 'EOF'
[tools]
# 在这里定义全局工具版本
# 例如: node = "lts"
#      python = "3.12"
#      ruby = "3.3"

[settings]
# mise 设置
experimental = true
EOF
        log_info "已创建 .mise.toml 配置文件"
    fi
}

# 验证版本管理器安装
verify_version_managers() {
    log_step "验证版本管理器安装..."
    
    local installed_count=0
    local total_count=${#VERSION_MANAGERS[@]}
    
    echo ""
    echo "版本管理器安装验证报告:"
    echo "========================"
    
    for manager in "${!VERSION_MANAGERS[@]}"; do
        local description="${VERSION_MANAGERS[$manager]}"
        
        if check_version_manager_installed "$manager"; then
            echo "✅ $manager - $description"
            installed_count=$((installed_count + 1))
            
            # 显示版本信息
            case "$manager" in
                "nvm")
                    if command -v nvm >/dev/null 2>&1; then
                        local nvm_version=$(nvm --version 2>/dev/null || echo "未知")
                        echo "   版本: $nvm_version"
                        local node_version=$(node --version 2>/dev/null || echo "未安装")
                        echo "   当前 Node.js: $node_version"
                    fi
                    ;;
                "pyenv")
                    if command -v pyenv >/dev/null 2>&1; then
                        local pyenv_version=$(pyenv --version 2>/dev/null || echo "未知")
                        echo "   版本: $pyenv_version"
                        local python_version=$(python --version 2>/dev/null || echo "未安装")
                        echo "   当前 Python: $python_version"
                    fi
                    ;;
                "rbenv")
                    if command -v rbenv >/dev/null 2>&1; then
                        local rbenv_version=$(rbenv --version 2>/dev/null || echo "未知")
                        echo "   版本: $rbenv_version"
                        local ruby_version=$(ruby --version 2>/dev/null || echo "未安装")
                        echo "   当前 Ruby: $ruby_version"
                    fi
                    ;;
                "mise")
                    if command -v mise >/dev/null 2>&1; then
                        local mise_version=$(mise --version 2>/dev/null || echo "未知")
                        echo "   版本: $mise_version"
                    fi
                    ;;
            esac
        else
            echo "❌ $manager - $description (未安装)"
        fi
    done
    
    echo ""
    echo "安装统计: $installed_count/$total_count 版本管理器已安装"
    
    if [[ $installed_count -gt 0 ]]; then
        log_success "🎉 版本管理器安装验证完成!"
        return 0
    else
        log_warn "⚠️ 没有版本管理器安装成功"
        return 1
    fi
}

# 显示使用说明
show_usage_instructions() {
    log_step "版本管理器使用说明"
    
    echo ""
    echo "版本管理器使用指南:"
    echo "=================="
    
    if check_version_manager_installed "nvm"; then
        echo ""
        echo "NVM (Node.js):"
        echo "  - 安装 Node.js 版本: nvm install <version>"
        echo "  - 切换版本: nvm use <version>"
        echo "  - 列出可用版本: nvm list-remote"
        echo "  - 设置默认版本: nvm alias default <version>"
    fi

    if check_version_manager_installed "pyenv"; then
        echo ""
        echo "pyenv (Python):"
        echo "  - 安装 Python 版本: pyenv install <version>"
        echo "  - 切换全局版本: pyenv global <version>"
        echo "  - 切换本地版本: pyenv local <version>"
        echo "  - 列出可用版本: pyenv install --list"
    fi

    if check_version_manager_installed "rbenv"; then
        echo ""
        echo "rbenv (Ruby):"
        echo "  - 安装 Ruby 版本: rbenv install <version>"
        echo "  - 切换全局版本: rbenv global <version>"
        echo "  - 切换本地版本: rbenv local <version>"
        echo "  - 列出可用版本: rbenv install --list"
    fi

    if check_version_manager_installed "mise"; then
        echo ""
        echo "mise (通用):"
        echo "  - 安装工具: mise install <tool>@<version>"
        echo "  - 使用工具: mise use <tool>@<version>"
        echo "  - 列出工具: mise list"
        echo "  - 配置文件: ~/.mise.toml"
    fi
    
    echo ""
    log_info "重新启动 shell 或运行 'source ~/.zshrc' 来加载版本管理器"
}

# 主函数
main() {
    log_info "开始版本管理器安装流程..."
    log_info "平台: $PLATFORM ($ARCH)"
    
    local failed_installations=0
    
    # 安装各个版本管理器 (根据需要启用/禁用)
    install_nvm || failed_installations=$((failed_installations + 1))
    install_pyenv || failed_installations=$((failed_installations + 1))
    # install_rbenv || failed_installations=$((failed_installations + 1))  # 可选
    # install_mise || failed_installations=$((failed_installations + 1))   # 可选
    
    # 创建配置文件
    create_version_manager_configs
    
    # 验证安装
    verify_version_managers
    
    # 显示使用说明
    show_usage_instructions
    
    if [[ $failed_installations -eq 0 ]]; then
        log_success "🎉 版本管理器安装流程完成!"
    else
        log_warn "⚠️ 部分版本管理器安装失败 ($failed_installations 个)"
    fi
    
    log_info "请重新启动终端或运行 'source ~/.zshrc' 来激活版本管理器"
}

# 运行主函数
main "$@"