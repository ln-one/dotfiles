#!/bin/bash
# ========================================
# Zim 框架安装脚本 (Chezmoi 管理)
# ========================================
# 自动安装和配置 Zim 框架
# 只在启用 Zim 功能时运行

{{- if and (hasKey . "features") .features.enable_zim }}

set -euo pipefail

echo "🚀 开始安装 Zim 框架..."

# 设置 Zim 相关路径
ZIM_HOME="${ZDOTDIR:-${HOME}}/.zim"
ZIM_CONFIG_FILE="${ZDOTDIR:-${HOME}}/.zimrc"

# 检查必需工具
check_requirements() {
    local missing_tools=()
    
    if ! command -v zsh >/dev/null 2>&1; then
        missing_tools+=("zsh")
    fi
    
    if ! command -v curl >/dev/null 2>&1 && ! command -v wget >/dev/null 2>&1; then
        missing_tools+=("curl 或 wget")
    fi
    
    if ! command -v git >/dev/null 2>&1; then
        missing_tools+=("git")
    fi
    
    if [ ${#missing_tools[@]} -gt 0 ]; then
        echo "❌ 错误: 缺少必需工具: ${missing_tools[*]}"
        echo "请先安装这些工具后再运行此脚本"
        exit 1
    fi
}

# 创建必要的目录结构
create_directories() {
    echo "📁 创建 Zim 目录结构..."
    
    # 创建 ZIM_HOME 目录
    if [ ! -d "$ZIM_HOME" ]; then
        mkdir -p "$ZIM_HOME"
        echo "✅ 创建目录: $ZIM_HOME"
    fi
    
    # 创建模块目录
    if [ ! -d "$ZIM_HOME/modules" ]; then
        mkdir -p "$ZIM_HOME/modules"
        echo "✅ 创建目录: $ZIM_HOME/modules"
    fi
}

# 下载 Zim 框架管理器
install_zimfw() {
    local zimfw_path="$ZIM_HOME/zimfw.zsh"
    
    if [ -f "$zimfw_path" ]; then
        echo "✅ Zim 框架管理器已存在，检查更新..."
        
        # 检查是否需要更新 (如果文件超过7天则更新)
        if [ -n "$(find "$zimfw_path" -mtime +7 2>/dev/null)" ]; then
            echo "🔄 更新 Zim 框架管理器..."
            download_zimfw "$zimfw_path"
        else
            echo "✅ Zim 框架管理器是最新的"
        fi
    else
        echo "📥 下载 Zim 框架管理器..."
        download_zimfw "$zimfw_path"
    fi
}

# 下载 zimfw.zsh 的具体实现
download_zimfw() {
    local zimfw_path="$1"
    local zimfw_url="https://github.com/zimfw/zimfw/releases/latest/download/zimfw.zsh"
    
    if command -v curl >/dev/null 2>&1; then
        curl -fsSL --create-dirs -o "$zimfw_path" "$zimfw_url" || {
            echo "❌ 使用 curl 下载 Zim 框架管理器失败"
            return 1
        }
    elif command -v wget >/dev/null 2>&1; then
        wget -nv -O "$zimfw_path" "$zimfw_url" || {
            echo "❌ 使用 wget 下载 Zim 框架管理器失败"
            return 1
        }
    else
        echo "❌ 错误: 需要 curl 或 wget 来下载 Zim 框架管理器"
        return 1
    fi
    
    # 验证下载的文件
    if [ ! -f "$zimfw_path" ] || [ ! -s "$zimfw_path" ]; then
        echo "❌ Zim 框架管理器下载失败或文件为空"
        return 1
    fi
    
    # 设置执行权限
    chmod +x "$zimfw_path"
    echo "✅ Zim 框架管理器下载完成"
}

# 验证 Zim 配置文件
verify_zimrc() {
    if [ ! -f "$ZIM_CONFIG_FILE" ]; then
        echo "⚠️  警告: .zimrc 配置文件不存在"
        echo "   Chezmoi 应该会创建此文件，请确保运行了 'chezmoi apply'"
        return 1
    fi
    
    # 检查配置文件是否包含基本模块
    if ! grep -q "zmodule" "$ZIM_CONFIG_FILE"; then
        echo "⚠️  警告: .zimrc 配置文件似乎不包含模块定义"
        return 1
    fi
    
    echo "✅ .zimrc 配置文件验证通过"
}

# 初始化 Zim 模块
initialize_zim() {
    echo "🔧 初始化 Zim 模块..."
    
    # 设置环境变量
    export ZIM_HOME
    
    # 运行 zimfw 初始化
    if [ -f "$ZIM_HOME/zimfw.zsh" ]; then
        # 使用 zsh 运行 zimfw 以避免 bash 兼容性问题
        zsh -c "
            export ZIM_HOME='$ZIM_HOME'
            source '$ZIM_HOME/zimfw.zsh'
            zimfw install
            zimfw init
        " || {
            echo "❌ Zim 模块初始化失败"
            return 1
        }
        
        echo "✅ Zim 模块初始化完成"
    else
        echo "❌ 错误: zimfw.zsh 不存在，无法初始化模块"
        return 1
    fi
}

# 验证安装结果
verify_installation() {
    echo "🔍 验证 Zim 安装..."
    
    local errors=0
    
    # 检查 zimfw.zsh
    if [ ! -f "$ZIM_HOME/zimfw.zsh" ]; then
        echo "❌ zimfw.zsh 不存在"
        ((errors++))
    fi
    
    # 检查 init.zsh
    if [ ! -f "$ZIM_HOME/init.zsh" ]; then
        echo "❌ init.zsh 不存在，模块可能未正确初始化"
        ((errors++))
    fi
    
    # 检查配置文件
    if [ ! -f "$ZIM_CONFIG_FILE" ]; then
        echo "❌ .zimrc 配置文件不存在"
        ((errors++))
    fi
    
    # 检查 fzf 集成 (如果启用)
    {{- if and (hasKey . "features") .features.enable_fzf }}
    if command -v fzf >/dev/null 2>&1; then
        if fzf --help 2>/dev/null | grep -q -- '--zsh'; then
            echo "✅ fzf 支持新的 --zsh 集成选项"
        else
            echo "⚠️  fzf 版本较旧，将使用传统集成方式"
        fi
    else
        echo "⚠️  fzf 未安装，fzf 功能将不可用"
    fi
    {{- end }}
    
    if [ $errors -eq 0 ]; then
        echo "✅ Zim 安装验证通过"
        return 0
    else
        echo "❌ Zim 安装验证失败，发现 $errors 个问题"
        return 1
    fi
}

# 平台特定的安装处理
handle_platform_specific() {
    echo "🖥️  处理平台特定配置..."
    
    case "{{ .chezmoi.os }}" in
        "darwin")
            echo "📱 检测到 macOS 平台"
            # macOS 特定处理
            if [ ! -d "/usr/local/share/zsh/site-functions" ] && [ ! -d "/opt/homebrew/share/zsh/site-functions" ]; then
                echo "⚠️  警告: 未找到 zsh 补全目录，某些补全功能可能不可用"
            fi
            ;;
        "linux")
            echo "🐧 检测到 Linux 平台"
            # Linux 特定处理
            case "{{ .package_manager }}" in
                "apt")
                    echo "📦 检测到 APT 包管理器"
                    ;;
                "yum")
                    echo "📦 检测到 YUM 包管理器"
                    ;;
                *)
                    echo "📦 未知包管理器: {{ .package_manager }}"
                    ;;
            esac
            ;;
        *)
            echo "❓ 未知平台: {{ .chezmoi.os }}"
            ;;
    esac
}

# 环境特定的优化
handle_environment_specific() {
    echo "🌍 处理环境特定优化..."
    
    case "{{ .environment }}" in
        "remote")
            echo "🔗 检测到远程 SSH 环境，使用轻量化配置"
            # 远程环境可能需要更少的模块或更快的启动
            ;;
        "container")
            echo "🐳 检测到容器环境，使用最小化配置"
            # 容器环境通常需要最小化的配置
            ;;
        "wsl")
            echo "🪟 检测到 WSL 环境，使用混合优化配置"
            # WSL 环境可能需要特殊的路径处理
            ;;
        "desktop")
            echo "🖥️  检测到桌面环境，使用完整配置"
            # 桌面环境可以使用所有功能
            ;;
        *)
            echo "❓ 未知环境: {{ .environment }}"
            ;;
    esac
}

# 主安装流程
main() {
    echo "🎯 开始 Zim 框架安装流程..."
    echo "   环境: {{ .environment }}"
    echo "   平台: {{ .chezmoi.os }}/{{ .chezmoi.arch }}"
    echo "   ZIM_HOME: $ZIM_HOME"
    
    # 执行安装步骤
    check_requirements
    create_directories
    handle_platform_specific
    handle_environment_specific
    install_zimfw
    
    # 只有在配置文件存在时才初始化
    if verify_zimrc; then
        initialize_zim
    else
        echo "⚠️  跳过模块初始化，等待 Chezmoi 创建配置文件"
        echo "   请运行 'chezmoi apply' 后再运行 'zsh -c \"source ~/.zshrc\"'"
    fi
    
    # 验证安装
    if verify_installation; then
        echo "🎉 Zim 框架安装完成！"
        echo ""
        echo "📋 后续步骤:"
        echo "   1. 运行 'chezmoi apply' 确保所有配置文件已应用"
        echo "   2. 重新启动终端或运行 'source ~/.zshrc'"
        echo "   3. 如需更新模块，运行 'zimfw update'"
        echo ""
        echo "💡 提示:"
        echo "   - 配置文件位置: $ZIM_CONFIG_FILE"
        echo "   - Zim 安装目录: $ZIM_HOME"
        echo "   - 查看可用命令: zimfw help"
    else
        echo "❌ Zim 框架安装过程中出现问题"
        echo "   请检查上述错误信息并重新运行安装"
        exit 1
    fi
}

# 运行主函数
main

{{- else }}
echo "ℹ️  Zim 功能已禁用，跳过安装"
echo "   要启用 Zim，请在 .chezmoi.toml.tmpl 中设置 enable_zim = true"
{{- end }}