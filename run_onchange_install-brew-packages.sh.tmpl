#!/bin/bash
# Homebrew 包安装脚本
# 使用 Brewfile 安装和管理工具包
# Requirements: 4.1, 4.2, 8.1

set -euo pipefail

# 颜色定义
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# 日志函数
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_step() {
    echo -e "${BLUE}[STEP]${NC} $1"
}

# 检查 Homebrew 是否已安装
check_homebrew() {
    if ! command -v brew >/dev/null 2>&1; then
        log_error "Homebrew 未安装。请先运行 Homebrew 安装脚本。"
        exit 1
    fi
    
    log_info "发现 Homebrew: $(brew --version | head -n1)"
}

# 设置 Homebrew 环境
setup_homebrew_env() {
    # 确保 Homebrew 在 PATH 中
    if [[ "{{ .chezmoi.os }}" == "linux" ]]; then
        if [[ -d "/home/linuxbrew/.linuxbrew" ]]; then
            eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
        fi
    fi
}

# 更新 Homebrew
update_homebrew() {
    log_step "更新 Homebrew..."
    brew update
    log_info "✅ Homebrew 更新完成"
}

# 安装 Brewfile 中的包
install_packages() {
    local brewfile_path="{{ .chezmoi.homeDir }}/Brewfile"
    
    if [[ ! -f "$brewfile_path" ]]; then
        log_error "Brewfile 不存在: $brewfile_path"
        exit 1
    fi
    
    log_step "使用 Brewfile 安装包..."
    log_info "Brewfile 路径: $brewfile_path"
    
    # 使用 brew bundle 安装
    if brew bundle --file="$brewfile_path" --verbose; then
        log_info "✅ 包安装完成"
    else
        log_warn "⚠️ 部分包安装可能失败，请检查上面的输出"
    fi
}

# 清理不需要的包
cleanup_packages() {
    log_step "清理不需要的包..."
    
    # 清理缓存
    brew cleanup
    
    # 检查过时的包
    if brew outdated --quiet | grep -q .; then
        log_info "发现过时的包:"
        brew outdated
        log_info "运行 'brew upgrade' 来更新这些包"
    else
        log_info "所有包都是最新的"
    fi
}

# 验证关键工具安装
verify_tools() {
    log_step "验证关键工具安装..."
    
    local tools=(
        "git:Git 版本控制"
        "curl:HTTP 客户端"
        "eza:现代化 ls"
        "bat:现代化 cat"
        "fzf:模糊搜索"
        "starship:Shell 提示符"
    )
    
    local failed_tools=()
    
    for tool_info in "${tools[@]}"; do
        local tool="${tool_info%%:*}"
        local description="${tool_info##*:}"
        
        if command -v "$tool" >/dev/null 2>&1; then
            log_info "✅ $description ($tool)"
        else
            log_warn "❌ $description ($tool) - 未找到"
            failed_tools+=("$tool")
        fi
    done
    
    if [[ ${#failed_tools[@]} -gt 0 ]]; then
        log_warn "以下工具安装失败: ${failed_tools[*]}"
        log_warn "请检查 Brewfile 配置或手动安装这些工具"
    else
        log_info "🎉 所有关键工具验证通过!"
    fi
}

# 显示安装摘要
show_summary() {
    log_step "安装摘要"
    
    echo "已安装的 Homebrew 包数量:"
    echo "  - Formulae: $(brew list --formula | wc -l)"
    
    {{- if eq .chezmoi.os "darwin" }}
    echo "  - Casks: $(brew list --cask | wc -l)"
    {{- end }}
    
    echo ""
    echo "Homebrew 信息:"
    echo "  - 版本: $(brew --version | head -n1)"
    echo "  - 前缀: $(brew --prefix)"
    echo "  - 仓库: $(brew --repository)"
    
    echo ""
    log_info "要查看所有已安装的包，运行: brew list"
    log_info "要更新包，运行: brew upgrade"
    log_info "要清理旧版本，运行: brew cleanup"
}

# 主函数
main() {
    log_info "开始 Homebrew 包安装流程..."
    
    # 检查 Homebrew
    check_homebrew
    
    # 设置环境
    setup_homebrew_env
    
    # 更新 Homebrew
    update_homebrew
    
    # 安装包
    install_packages
    
    # 清理
    cleanup_packages
    
    # 验证工具
    verify_tools
    
    # 显示摘要
    show_summary
    
    log_info "🎉 Homebrew 包安装流程完成!"
}

# 运行主函数
main "$@"