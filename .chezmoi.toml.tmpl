# Chezmoi 配置文件
# 根据平台和环境动态生成配置

[data]
  # 基础系统信息
  os = "{{ .chezmoi.os }}"
  arch = "{{ .chezmoi.arch }}"
  hostname = "{{ .chezmoi.hostname }}"
  username = "{{ .chezmoi.username }}"
  
  # 环境类型检测
  {{- if or (env "SSH_CONNECTION") (env "SSH_CLIENT") }}
  environment = "remote"
  {{- else if and (stat "/proc/version") (regexMatch "microsoft" (cat "/proc/version")) }}
  environment = "wsl"
  {{- else if env "CONTAINER" }}
  environment = "container"
  {{- else }}
  environment = "desktop"
  {{- end }}
  
  # 包管理器检测
  {{- if lookPath "apt" }}
  package_manager = "apt"
  {{- else if lookPath "yum" }}
  package_manager = "yum"
  {{- else if lookPath "brew" }}
  package_manager = "brew"
  {{- else }}
  package_manager = "unknown"
  {{- end }}

[data.user]
  name = "{{ .chezmoi.username }}"
  email = "ln1.opensource@gmail.com"  # 需要用户自定义
  
[data.preferences]
  shell = "zsh"
  editor = "nvim"
  theme = "dark"
  
[data.features]
  enable_ai_tools = true
  enable_proxy = true
  {{- if or (env "SSH_CONNECTION") (env "SSH_CLIENT") }}
  enable_1password = false  # 远程环境禁用 1Password
  {{- else }}
  enable_1password = true   # 本地环境启用 1Password
  {{- end }}
  enable_oh_my_zsh = false  # 禁用 Oh My Zsh
  enable_zim = true         # 启用 Zim 框架
  enable_starship = true    # 启用 Starship 提示符
  enable_fzf = true         # 启用 fzf 模糊搜索
  enable_zoxide = true      # 启用 zoxide 智能目录跳转
  enable_evalcache = true   # 启用 evalcache 缓存以加速 shell 启动
  
  # 开发语言支持
  enable_node = true
  enable_python = true
  enable_go = false
  enable_rust = false
  
  # 容器和虚拟化
  enable_docker = true

# 代理配置 - 优先使用环境变量，其次使用 Clash 配置
[data.proxy]
{{- $http_proxy := env "http_proxy" | default (env "HTTP_PROXY") }}
{{- $https_proxy := env "https_proxy" | default (env "HTTPS_PROXY") }}
{{- $socks_proxy := env "socks_proxy" | default (env "SOCKS_PROXY") }}

{{- if or $http_proxy $https_proxy $socks_proxy }}
# 使用环境变量中的代理配置
enabled = true
source = "environment"
http_proxy = "{{ $http_proxy | default "" }}"
https_proxy = "{{ $https_proxy | default "" }}"
socks_proxy = "{{ $socks_proxy | default "" }}"
{{- else if or (eq .chezmoi.os "linux") (eq .chezmoi.os "windows") }}
  {{- $clash_config := joinPath .chezmoi.homeDir ".config/clash/config.yaml" }}
  {{- if stat $clash_config }}
    {{- $clash := include $clash_config | fromYaml }}
# 使用 Clash 配置文件
enabled = true
source = "clash"
host = "127.0.0.1"
http_port = {{ $clash.port }}
socks_port = {{ index $clash "socks-port" }}
http_proxy = "http://127.0.0.1:{{ $clash.port }}"
https_proxy = "http://127.0.0.1:{{ $clash.port }}"
socks_proxy = "socks5://127.0.0.1:{{ index $clash "socks-port" }}"
  {{- else }}
# 没有找到代理配置 - 提供默认空值
enabled = false
http_proxy = ""
https_proxy = ""
socks_proxy = ""
  {{- end }}
{{- else }}
# macOS 或其他系统，且无环境变量 - 提供默认空值
enabled = false
http_proxy = ""
https_proxy = ""
socks_proxy = ""
{{- end }}
  
[data.packages]
  # 核心工具包列表
  brew = ["git", "curl", "wget", "fzf", "ripgrep", "fd", "bat", "eza", "zoxide"]
  apt = ["git", "curl", "wget", "unzip", "build-essential", "fzf", "ripgrep", "fd-find"]
  
  # 必需工具列表 (按优先级分组)
  essential = ["git", "curl", "wget", "unzip"]
  modern_cli = ["eza", "bat", "fd", "ripgrep", "fzf", "jq", "zoxide"]
  development = ["neovim", "tmux", "htop", "tree"]
  
[data.paths]
  dotfiles = "{{ .chezmoi.sourceDir }}"
  projects = "{{ .chezmoi.homeDir }}/Projects"
  config = "{{ .chezmoi.homeDir }}/.config"


# 环境特定配置
[data.environments.desktop]
  packages = ["firefox", "code", "docker"]
  services = ["docker", "ssh"]
  
[data.environments.server]
  packages = ["htop", "tmux", "vim"]
  services = ["ssh"]
  
[data.environments.container]
  packages = ["curl", "git"]
  services = []

# Chezmoi 行为配置
[edit]
  command = "{{ if lookPath "code" }}code{{ else if lookPath "nvim" }}nvim{{ else }}vi{{ end }}"

[git]
  autoCommit = true
  autoPush = false

{{- $op_available := and (lookPath "op") (not (or (env "SSH_CONNECTION") (env "SSH_CLIENT"))) }}
{{- $is_remote := or (env "SSH_CONNECTION") (env "SSH_CLIENT") }}
{{- if and (hasKey . "features") .features.enable_1password $op_available (not $is_remote) }}
# 1Password 集成配置
[onepassword]
  prompt = false
  cache = true

# 统一的密钥读取 - 所有 1Password 调用都在这里
[data.secrets]
  # Git 配置
  git_user_email = "{{ onepasswordRead "op://Work/Git Signing Key/email" }}"
  git_signing_key = "{{ onepasswordRead "op://Work/Git Signing Key/public key" }}"
  
  # API Keys
  openai_api_key = "{{ onepasswordRead "op://Work/OpenAI-API-Key/api-key" }}"
  
  # Google Cloud
  google_cloud_project = "{{ onepasswordRead "op://Work/Google Cloud/Project ID" }}"
  
  # Aliyun Server 
  aliyun_server_url = "{{ onepasswordRead "op://Work/Aliyun/URL" }}"
  aliyun_server_username = "{{ onepasswordRead "op://Work/Aliyun/username" }}"

  # MySQL/MariaDB
  db_user = "{{ onepasswordRead "op://Work/Ali-MySQL/username" }}"
  db_pass = "{{ onepasswordRead "op://Work/Ali-MySQL/password" }}"
  db_host = "{{ onepasswordRead "op://Work/Ali-MySQL/server" }}"
  db_port = "{{ onepasswordRead "op://Work/Ali-MySQL/port" }}"
{{- else }}
# 1Password 不可用或在远程环境 - 使用默认值
[data.secrets]
  # Git 配置 (默认值)
  git_user_email = "ln1.opensource@gmail.com"
  git_signing_key = ""
  
  # API Keys (空值，需要手动配置)
  openai_api_key = ""
  
  # Google Cloud (空值)
  google_cloud_project = ""
  
  # Aliyun Server (空值)
  aliyun_server_url = ""
  aliyun_server_username = ""

  # MySQL/MariaDB (空值)
  db_user = ""
  db_pass = ""
  db_host = ""
  db_port = ""
{{- end }}

# 禁用加密 (我们使用 1Password 管理密钥)
encryption = ""
