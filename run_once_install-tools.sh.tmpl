#!/bin/bash
# 工具自动安装脚本
# 检测并安装必需的开发工具，支持跨平台条件安装
# Requirements: 4.3, 8.2

set -euo pipefail

# 颜色定义
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m'

# 日志函数
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_step() {
    echo -e "${BLUE}[STEP]${NC} $1"
}

log_success() {
    echo -e "${PURPLE}[SUCCESS]${NC} $1"
}

# 全局变量
PLATFORM="{{ .chezmoi.os }}"
ARCH="{{ .chezmoi.arch }}"
ENVIRONMENT="{{ .environment }}"
PACKAGE_MANAGER="{{ .package_manager }}"

# 必需工具列表 - 按优先级分组
declare -A ESSENTIAL_TOOLS=(
    ["git"]="版本控制系统"
    ["curl"]="HTTP 客户端"
    ["wget"]="文件下载工具"
    ["unzip"]="压缩文件处理"
)

declare -A MODERN_CLI_TOOLS=(
    ["eza"]="现代化 ls 替代品"
    ["bat"]="现代化 cat 替代品" 
    ["fd"]="现代化 find 替代品"
    ["ripgrep"]="现代化 grep 替代品"
    ["fzf"]="模糊搜索工具"
    ["jq"]="JSON 处理工具"
)

declare -A DEVELOPMENT_TOOLS=(
    ["neovim"]="现代化编辑器"
    ["tmux"]="终端复用器"
    ["htop"]="系统监控工具"
    ["tree"]="目录树显示"
)

{{- if .features.enable_node }}
declare -A NODE_TOOLS=(
    ["node"]="Node.js 运行时"
    ["npm"]="Node 包管理器"
)
{{- end }}

{{- if .features.enable_python }}
declare -A PYTHON_TOOLS=(
    ["python3"]="Python 3 解释器"
    ["pip3"]="Python 包管理器"
)
{{- end }}

# 检查工具是否已安装
check_tool_installed() {
    local tool="$1"
    if command -v "$tool" >/dev/null 2>&1; then
        return 0
    else
        return 1
    fi
}

# 获取工具版本信息
get_tool_version() {
    local tool="$1"
    case "$tool" in
        "git")
            git --version 2>/dev/null | head -n1 || echo "未知版本"
            ;;
        "node")
            node --version 2>/dev/null || echo "未知版本"
            ;;
        "python3")
            python3 --version 2>/dev/null || echo "未知版本"
            ;;
        "neovim")
            nvim --version 2>/dev/null | head -n1 || echo "未知版本"
            ;;
        *)
            $tool --version 2>/dev/null | head -n1 || echo "已安装"
            ;;
    esac
}

# 使用系统包管理器安装工具
install_with_system_package_manager() {
    local tool="$1"
    local description="$2"
    
    log_info "使用系统包管理器安装 $tool ($description)..."
    
    case "$PACKAGE_MANAGER" in
        "apt")
            # Ubuntu/Debian 包名映射
            case "$tool" in
                "eza") 
                    # eza 在 Ubuntu 24.04+ 可用，否则使用 exa
                    if sudo apt-get install -y eza 2>/dev/null; then
                        return 0
                    else
                        log_warn "eza 不可用，尝试安装 exa..."
                        sudo apt-get install -y exa || return 1
                    fi
                    ;;
                "bat")
                    sudo apt-get install -y batcat || return 1
                    # 创建 bat 别名指向 batcat
                    if [[ ! -L "$HOME/.local/bin/bat" ]]; then
                        mkdir -p "$HOME/.local/bin"
                        ln -sf /usr/bin/batcat "$HOME/.local/bin/bat"
                    fi
                    ;;
                "fd")
                    sudo apt-get install -y fd-find || return 1
                    # 创建 fd 别名指向 fdfind
                    if [[ ! -L "$HOME/.local/bin/fd" ]]; then
                        mkdir -p "$HOME/.local/bin"
                        ln -sf /usr/bin/fdfind "$HOME/.local/bin/fd"
                    fi
                    ;;
                "ripgrep")
                    sudo apt-get install -y ripgrep || return 1
                    ;;
                "neovim")
                    sudo apt-get install -y neovim || return 1
                    ;;
                *)
                    sudo apt-get install -y "$tool" || return 1
                    ;;
            esac
            ;;
        "yum"|"dnf")
            local pkg_cmd="$PACKAGE_MANAGER"
            case "$tool" in
                "eza"|"bat"|"fd")
                    log_warn "$tool 在 $PACKAGE_MANAGER 中可能不可用，建议使用 Homebrew"
                    return 1
                    ;;
                *)
                    sudo $pkg_cmd install -y "$tool" || return 1
                    ;;
            esac
            ;;
        *)
            log_warn "不支持的包管理器: $PACKAGE_MANAGER"
            return 1
            ;;
    esac
}

# 使用 Homebrew 安装工具
install_with_homebrew() {
    local tool="$1"
    local description="$2"
    
    if ! command -v brew >/dev/null 2>&1; then
        log_warn "Homebrew 未安装，跳过 $tool"
        return 1
    fi
    
    log_info "使用 Homebrew 安装 $tool ($description)..."
    brew install "$tool" || return 1
}

# 安装单个工具
install_tool() {
    local tool="$1"
    local description="$2"
    local install_method="${3:-auto}"
    
    # 检查是否已安装
    if check_tool_installed "$tool"; then
        local version=$(get_tool_version "$tool")
        log_success "✅ $tool 已安装 - $description ($version)"
        return 0
    fi
    
    log_step "安装 $tool - $description"
    
    # 根据安装方法和平台选择安装策略
    case "$install_method" in
        "homebrew")
            install_with_homebrew "$tool" "$description"
            ;;
        "system")
            install_with_system_package_manager "$tool" "$description"
            ;;
        "auto")
            # 自动选择最佳安装方法
            if [[ "$PLATFORM" == "darwin" ]]; then
                # macOS 优先使用 Homebrew
                install_with_homebrew "$tool" "$description" || \
                install_with_system_package_manager "$tool" "$description"
            else
                # Linux 优先使用系统包管理器，失败后尝试 Homebrew
                install_with_system_package_manager "$tool" "$description" || \
                install_with_homebrew "$tool" "$description"
            fi
            ;;
        *)
            log_error "未知的安装方法: $install_method"
            return 1
            ;;
    esac
    
    # 验证安装结果
    if check_tool_installed "$tool"; then
        local version=$(get_tool_version "$tool")
        log_success "✅ $tool 安装成功 - $description ($version)"
        return 0
    else
        log_error "❌ $tool 安装失败 - $description"
        return 1
    fi
}

# 安装工具组
install_tool_group() {
    local -n tools_ref=$1
    local group_name="$2"
    local install_method="${3:-auto}"
    
    log_step "安装 $group_name"
    
    local failed_tools=()
    local installed_count=0
    local total_count=${#tools_ref[@]}
    
    for tool in "${!tools_ref[@]}"; do
        local description="${tools_ref[$tool]}"
        
        if install_tool "$tool" "$description" "$install_method"; then
            ((installed_count++))
        else
            failed_tools+=("$tool")
        fi
    done
    
    # 显示组安装结果
    if [[ ${#failed_tools[@]} -eq 0 ]]; then
        log_success "🎉 $group_name 全部安装成功 ($installed_count/$total_count)"
    else
        log_warn "⚠️ $group_name 部分安装失败: ${failed_tools[*]} ($installed_count/$total_count)"
    fi
    
    return ${#failed_tools[@]}
}

# 更新系统包管理器
update_system_packages() {
    log_step "更新系统包管理器..."
    
    case "$PACKAGE_MANAGER" in
        "apt")
            sudo apt-get update || log_warn "apt 更新失败"
            ;;
        "yum")
            sudo yum check-update || true  # yum check-update 返回非零值是正常的
            ;;
        "dnf")
            sudo dnf check-update || true  # dnf check-update 返回非零值是正常的
            ;;
        "brew")
            brew update || log_warn "Homebrew 更新失败"
            ;;
        *)
            log_warn "未知的包管理器，跳过更新"
            ;;
    esac
}

# 设置工具路径
setup_tool_paths() {
    log_step "设置工具路径..."
    
    # 确保 ~/.local/bin 在 PATH 中
    local local_bin="$HOME/.local/bin"
    if [[ -d "$local_bin" ]] && [[ ":$PATH:" != *":$local_bin:"* ]]; then
        export PATH="$local_bin:$PATH"
        log_info "已添加 $local_bin 到 PATH"
    fi
    
    # Linux 上的 Homebrew 路径设置
    if [[ "$PLATFORM" == "linux" ]] && [[ -d "/home/linuxbrew/.linuxbrew" ]]; then
        eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
        log_info "已设置 Linux Homebrew 环境"
    fi
}

# 验证关键工具安装
verify_installation() {
    log_step "验证工具安装..."
    
    local all_tools=()
    
    # 合并所有工具列表
    for tool in "${!ESSENTIAL_TOOLS[@]}"; do
        all_tools+=("$tool")
    done
    
    for tool in "${!MODERN_CLI_TOOLS[@]}"; do
        all_tools+=("$tool")
    done
    
    for tool in "${!DEVELOPMENT_TOOLS[@]}"; do
        all_tools+=("$tool")
    done
    
{{- if .features.enable_node }}
    for tool in "${!NODE_TOOLS[@]}"; do
        all_tools+=("$tool")
    done
{{- end }}

{{- if .features.enable_python }}
    for tool in "${!PYTHON_TOOLS[@]}"; do
        all_tools+=("$tool")
    done
{{- end }}
    
    local installed_count=0
    local total_count=${#all_tools[@]}
    
    echo ""
    echo "工具安装验证报告:"
    echo "===================="
    
    for tool in "${all_tools[@]}"; do
        if check_tool_installed "$tool"; then
            local version=$(get_tool_version "$tool")
            echo "✅ $tool - $version"
            ((installed_count++))
        else
            echo "❌ $tool - 未安装"
        fi
    done
    
    echo ""
    echo "安装统计: $installed_count/$total_count 工具已安装"
    
    if [[ $installed_count -eq $total_count ]]; then
        log_success "🎉 所有工具安装验证通过!"
        return 0
    else
        log_warn "⚠️ 部分工具安装失败，请检查上面的报告"
        return 1
    fi
}

# 显示安装摘要
show_installation_summary() {
    log_step "安装摘要"
    
    echo ""
    echo "系统信息:"
    echo "  - 平台: $PLATFORM ($ARCH)"
    echo "  - 环境: $ENVIRONMENT"
    echo "  - 包管理器: $PACKAGE_MANAGER"
    
    echo ""
    echo "功能配置:"
{{- if .features.enable_node }}
    echo "  - Node.js 支持: 启用"
{{- end }}
{{- if .features.enable_python }}
    echo "  - Python 支持: 启用"
{{- end }}
{{- if .features.enable_ai_tools }}
    echo "  - AI 工具: 启用"
{{- end }}
{{- if .features.enable_proxy }}
    echo "  - 代理工具: 启用"
{{- end }}
    
    echo ""
    log_info "要查看已安装的工具，运行: which <tool_name>"
    log_info "要更新工具，请运行相应的包管理器更新命令"
    
    if command -v brew >/dev/null 2>&1; then
        log_info "Homebrew 工具更新: brew upgrade"
    fi
    
    if [[ "$PACKAGE_MANAGER" == "apt" ]]; then
        log_info "系统工具更新: sudo apt upgrade"
    fi
}

# 主函数
main() {
    log_info "开始工具自动安装流程..."
    log_info "平台: $PLATFORM, 环境: $ENVIRONMENT, 包管理器: $PACKAGE_MANAGER"
    
    # 设置工具路径
    setup_tool_paths
    
    # 更新包管理器
    update_system_packages
    
    # 安装必需工具 (最高优先级)
    install_tool_group ESSENTIAL_TOOLS "必需工具" "auto"
    
    # 安装现代化 CLI 工具
    install_tool_group MODERN_CLI_TOOLS "现代化 CLI 工具" "auto"
    
    # 安装开发工具
    install_tool_group DEVELOPMENT_TOOLS "开发工具" "auto"
    
{{- if .features.enable_node }}
    # 安装 Node.js 工具
    install_tool_group NODE_TOOLS "Node.js 工具" "auto"
{{- end }}

{{- if .features.enable_python }}
    # 安装 Python 工具
    install_tool_group PYTHON_TOOLS "Python 工具" "auto"
{{- end }}
    
    # 验证安装
    verify_installation
    
    # 显示摘要
    show_installation_summary
    
    log_success "🎉 工具自动安装流程完成!"
}

# 运行主函数
main "$@"