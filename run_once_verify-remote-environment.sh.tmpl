#!/bin/bash
# ========================================
# 远程环境验证和修复脚本
# ========================================
# 确保远程环境配置正确工作

{{- if eq .environment "remote" }}

set -euo pipefail

echo "🌐 验证和修复远程环境配置..."

# 创建日志文件
LOG_FILE="$HOME/.chezmoi-remote-setup.log"
exec 1> >(tee -a "$LOG_FILE")
exec 2> >(tee -a "$LOG_FILE" >&2)

echo "$(date): 开始远程环境验证和修复" >> "$LOG_FILE"

# 检查SSH连接
if [[ -n "${SSH_CONNECTION:-}" ]] || [[ -n "${SSH_CLIENT:-}" ]]; then
    echo "✅ SSH连接检测正常"
else
    echo "⚠️  未检测到SSH连接，但环境被识别为remote"
fi

# 检查必要的目录
echo "📁 检查必要目录..."
mkdir -p "$HOME/.cache/starship"
mkdir -p "$HOME/.config"
mkdir -p "$HOME/.local/bin"

# 检查starship安装
if command -v starship >/dev/null 2>&1; then
    echo "✅ Starship已安装: $(starship --version)"
else
    echo "⚠️  Starship未安装，尝试安装..."
    
    # 尝试使用包管理器安装
    if command -v apt >/dev/null 2>&1; then
        if apt-cache search starship | grep -q "^starship "; then
            sudo apt update && sudo apt install -y starship
        else
            # 使用官方安装脚本
            curl -sS https://starship.rs/install.sh | sh -s -- --yes
        fi
    elif command -v yum >/dev/null 2>&1; then
        # CentOS/RHEL
        curl -sS https://starship.rs/install.sh | sh -s -- --yes
    else
        # 通用安装方法
        curl -sS https://starship.rs/install.sh | sh -s -- --yes
    fi
    
    # 验证安装
    if command -v starship >/dev/null 2>&1; then
        echo "✅ Starship安装成功"
    else
        echo "❌ Starship安装失败"
    fi
fi

# 检查shell配置
echo "🐚 检查shell配置..."
if [[ -n "$ZSH_VERSION" ]]; then
    echo "✅ 使用Zsh: $ZSH_VERSION"
elif [[ -n "$BASH_VERSION" ]]; then
    echo "✅ 使用Bash: $BASH_VERSION"
else
    echo "⚠️  未知shell类型"
fi

# 检查环境变量
echo "🔧 检查环境变量..."
echo "  DEVELOPMENT_MODE: ${DEVELOPMENT_MODE:-not set}"
echo "  GUI_TOOLS_ENABLED: ${GUI_TOOLS_ENABLED:-not set}"
echo "  REMOTE_ENVIRONMENT: ${REMOTE_ENVIRONMENT:-not set}"

# 检查函数定义
echo "🔍 检查函数定义..."
if declare -f sysinfo >/dev/null 2>&1; then
    echo "✅ sysinfo函数已定义"
else
    echo "⚠️  sysinfo函数未定义"
fi

if declare -f remote_proxyon >/dev/null 2>&1; then
    echo "✅ remote_proxyon函数已定义"
else
    echo "⚠️  remote_proxyon函数未定义"
fi

# 检查别名
echo "🔗 检查别名..."
if alias proxyon >/dev/null 2>&1; then
    echo "✅ proxyon别名已定义"
else
    echo "⚠️  proxyon别名未定义"
fi

# 测试基本功能
echo "🧪 测试基本功能..."

# 测试目录创建函数
if declare -f mkcd >/dev/null 2>&1; then
    echo "✅ mkcd函数可用"
else
    echo "⚠️  mkcd函数不可用"
fi

# 测试网络连接
if ping -c 1 8.8.8.8 >/dev/null 2>&1; then
    echo "✅ 网络连接正常"
else
    echo "⚠️  网络连接异常"
fi

# 修复常见的shell配置问题
echo "🔧 修复常见配置问题..."

# 确保.zshrc正确加载
if [[ -f "$HOME/.zshrc" ]] && [[ -n "$ZSH_VERSION" ]]; then
    # 检查是否有语法错误
    if ! zsh -n "$HOME/.zshrc" 2>/dev/null; then
        echo "⚠️  检测到.zshrc语法错误，尝试修复..."
        # 备份原文件
        cp "$HOME/.zshrc" "$HOME/.zshrc.backup.$(date +%Y%m%d_%H%M%S)"
        echo "✅ 已备份原.zshrc文件"
    fi
fi

# 确保PATH包含常用目录
echo "🛤️  检查和修复PATH..."
REQUIRED_PATHS=("$HOME/.local/bin" "/usr/local/bin")
for path in "${REQUIRED_PATHS[@]}"; do
    if [[ ":$PATH:" != *":$path:"* ]] && [[ -d "$path" ]]; then
        export PATH="$path:$PATH"
        echo "✅ 添加 $path 到PATH"
    fi
done

# 检查和修复权限问题
echo "🔐 检查文件权限..."
if [[ -f "$HOME/.zshrc" ]]; then
    chmod 644 "$HOME/.zshrc"
fi
if [[ -d "$HOME/.config" ]]; then
    chmod 755 "$HOME/.config"
fi
if [[ -d "$HOME/.local/bin" ]]; then
    chmod 755 "$HOME/.local/bin"
fi

# 测试shell重新加载
echo "🔄 测试shell配置重新加载..."
if [[ -n "$ZSH_VERSION" ]] && [[ -f "$HOME/.zshrc" ]]; then
    if zsh -c "source $HOME/.zshrc && echo 'Shell配置加载成功'" 2>/dev/null; then
        echo "✅ Zsh配置重新加载成功"
    else
        echo "⚠️  Zsh配置重新加载失败，请检查配置文件"
    fi
fi

echo "$(date): 远程环境验证和修复完成" >> "$LOG_FILE"
echo "🎉 远程环境验证完成！"

{{- else }}
echo "ℹ️  当前不是远程环境，跳过验证"
{{- end }}